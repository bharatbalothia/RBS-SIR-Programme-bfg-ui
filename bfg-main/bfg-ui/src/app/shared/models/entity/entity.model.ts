import { Schedule } from '../schedule/schedule.model';

export interface Entity {
    entityLogId?: number;
    entityId?: string;
    entity: string;
    service: string;
    requestorDN: string;
    responderDN: string;
    serviceName?: string;
    requestType?: string;
    trace?: boolean;
    deliveryNotification?: boolean;
    deliveryNotifDN?: string;
    deliveryNotifRT?: string;
    requestRef?: string;
    fileDesc?: string;
    fileInfo?: string;
    transferDesc?: string;
    transferInfo?: string;
    compression?: boolean;
    mailboxPathIn: string;
    mailboxPathOut: string;
    mqQueueIn?: string;
    mqQueueOut?: string;
    entityParticipantType?: string;
    directParticipant?: string;
    maxTransfersPerBulk: number;
    maxBulksPerFile: number;
    startOfDay: number;
    endOfDay: number;
    cdNode?: string;
    idfWTOMsgId?: string;
    cdfWTOMsgId?: string;
    sdfWTOMsgId?: string;
    rsfWTOMsgId?: string;
    dnfWTOMsgId?: string;
    dvfWTOMsgId?: string;
    msrWTOMsgId?: string;
    psrWTOMsgId?: string;
    drrWTOMsgId?: string;
    rtfWTOMsgId?: string;
    mbpWTOMsgId?: string;
    mqHost?: string;
    mqPort?: string;
    mqQManager?: string;
    mqChannel?: string;
    mqQueueName?: string;
    mqQueueBinding?: string;
    mqQueueContext?: string;
    mqDebug?: number;
    mqSSLOptions?: string;
    mqSSLCiphers?: string;
    mqSSLKeyCert?: string;
    mqSSLCaCert?: string;
    mqHeader?: string;
    mqSessionTimeout?: number;
    routeInbound: boolean;
    routeOutbound?: boolean;
    inboundRequestorDN: string;
    inboundResponderDN: string;
    inboundService: string;
    inboundType?: string;
    inboundRequestType?: string[];
    nonRepudiation?: boolean;
    pauseInbound?: boolean;
    pauseOutbound?: boolean;
    deleted?: boolean;
    changeID?: string;
    changerComments?: string;
    irishStep2?: boolean;
    e2eSigning: string;
    snF?: boolean;
    schedules?: Schedule[];
    operation?: string;
}
